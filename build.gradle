import me.modmuss50.mpp.PublishModTask
import me.modmuss50.mpp.ReleaseType

plugins {
    // see https://fabricmc.net/develop/ for new versions
    id 'fabric-loom' version '1.10-SNAPSHOT' apply false
    // see https://projects.neoforged.net/neoforged/moddevgradle for new versions
    id 'net.neoforged.moddev' version '2.0.95' apply false
    id 'com.gradleup.shadow'  version '9.0.0-beta13' apply false
    id "me.modmuss50.mod-publish-plugin" version '0.8.4'
    id("io.github.dexman545.outlet") version "1.7.0-alpha.4"
}

configurations {
    fabricJar {
        canBeResolved = true
        canBeConsumed = false
    }
    neoforgeJar {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    fabricJar project(path: ':fabric', configuration: 'shippingJar')
    neoforgeJar project(path: ':neoforge', configuration: 'shippingJar')
}

outlet {
    mcVersionRange = fab_mc_version_range
    propertiesData = [
            'minecraft_version' : outlet.latestMc(),
            'fabric_version': outlet.fapiVersion(),
            'fabric_loader_version' : outlet.loaderVersion(),
            'neo_form_version' : outlet.neoformVersion(),
            'neoforge_version' : outlet.neoforgeVersion() ?: project.neoforge_version,
            'parchment_minecraft' : outlet.parchmentVersion(outlet.latestMc()).v1 ?: project.parchment_minecraft,
            'parchment_version' : outlet.parchmentVersion(outlet.latestMc()).v2 ?: project.parchment_version,
            'java_version' : outlet.javaLanguageCompatibility().toString(),
    ]
}

tasks.register("updateVersions",  dex.plugins.TaskPropertiesUpdate) {
}

publishMods {
    changelog = providers.fileContents(layout.projectDirectory.file("changelog.md")).getAsText()
    type = getVersionType()

    dryRun = providers.environmentVariable("CURSE").getOrNull() == null ||
            providers.environmentVariable("MODRINTH").getOrNull() == null

    def cfOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSE")
        projectId = "347405"
        for (final def v in outlet.curseforgeMcVersions()) {
            minecraftVersions.add(v)
        }
    }

    def mrOptions = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH")
        projectId = "uSdcnlts"
        for (final def v in outlet.mcVersions()) {
            minecraftVersions.add(v)
        }
    }

    def fabricJar = configurations.fabricJar.elements.map {
        it.asFile.first
    }

    def neoforgeJar = configurations.neoforgeJar.elements.map {
        it.asFile.first
    }

    curseforge("curseforgeFabric") {
        from cfOptions
        file.fileProvider(fabricJar)

        modLoaders.add("fabric")
        requires {
            slug = "fabric-api"
        }
    }

    curseforge("curseforgeNeoforge") {
        from cfOptions
        file.fileProvider(neoforgeJar)

        modLoaders.add("neoforge")
    }

    modrinth("modrinthNeoforge") {
        from mrOptions
        file.fileProvider(neoforgeJar)

        modLoaders.add("neoforge")
    }

    modrinth("modrinthFabric") {
        from mrOptions
        file.fileProvider(fabricJar)

        modLoaders.add("fabric")
        requires {
            slug = "fabric-api"
        }
    }
}

tasks.withType(PublishModTask).configureEach {
    def mcv = providers.gradleProperty("minecraft_version").get()
    onlyIf {
        def t = it as PublishModTask
        def isSnapshot = (mcv.contains("w") || mcv.contains("p") || mcv.contains("r"))
        def isForForge = t.platform.modLoaders.get().contains("forge") || t.platform.modLoaders.get().contains("neoforge")
        def isCurseforge = it.name.contains("Curseforge")
        def isRelease = t.platform.type.get() == ReleaseType.STABLE

        return ((isForForge ^ isSnapshot) || !isForForge) && (!isCurseforge || isRelease)
    }
}

def getVersionType() {
    if ((version as String).contains('alpha')) {
        return ReleaseType.ALPHA
    }

    if ((version as String).contains('beta')) {
        return ReleaseType.BETA
    }

    return ReleaseType.STABLE
}